
package Arrays {

    // returns the index of the maximal element of the array
    fn maxIdx(array: arr Int, firstIdx: Int) -> Int {
        if #array == 0 {
            panic "max of empty array"
        } else {
            var maxIdx = firstIdx;
            for val len = #array, var i = firstIdx + 1; i < len; i += 1 {
                if array[i] > array[maxIdx] {
                    maxIdx = i;
                }
            };
            return maxIdx
        }
    }

}

module Sorting(package Arrays) {

    fn swap(r: Region^, array: mut arr^{r} Int, i1: Int, i2: Int) -> Void {
        val tmp = array[i1];
        array[i1] = array[i2];
        array[i2] = tmp;
    }

    fn selectionSort(reg: Region^, array: mut arr^{reg} Int) {
        for var i = 0; i < #array; i += 1 {
            val maxIdx = Arrays.maxIdx(array, i);
            swap(reg, array, i, maxIdx)
        };
    }

}

package Main {

    fn main(arr String) {
        val r = newregion;
        val nbs = arr@r Int[10];
        for var i = 0; i < 10; i += 1 {
            nbs[i] = (2*i - i*i + 200) % 25;
            nbs[i] += 1;
        };
        val sorting = new Sorting();
        sorting.selectionSort(r, nbs);
        for var i = 0; i < 10; i += 1 {
            print(intToString(nbs[i]));
            print(" ")
        }
    }

}
