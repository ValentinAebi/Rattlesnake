
interface Super {
    x: Int
}

struct Sub : Super {
    var x: Int,
    y: String
}

struct Indep {
    i: Int
}

interface I {}

fn create() -> mut Super {
    return new mut Sub { 10, "Hello" };
}

fn testFunc() -> String {
    val a = create() as mut Sub;
    var s = readY(a) + " ";     // s: "Hello "
    val b: mut Super = a;
    val c: Super = a;
    setXSub(c as Sub);    // ERROR: missing modification permission
    val d = c as mut Sub; // ERROR: cannot be cast to mut
    setX(d);
    val e = a as String;  // ERROR: unrelated types
    print(e);
    val f = a as Super;   // WARNING: useless cast
    setX(f);              // ERROR: missing modification permission
    val aPrime: Sub = a;
    val bPrime: Super = b;
    val g = aPrime as Indep;   // ERROR: unrelated types
    val h = bPrime as Indep;   // ERROR: unrelated types
    print(boolToString(g == h));
    val i = aPrime as I;    // ERROR: unrelated types
    val j = bPrime as I;    // ERROR: unrelated types
    print(boolToString(i == j));
    setX(b);
    s += readY(b as Sub);       // s: "Hello Hello"
    s += " ";                   // s: "Hello Hello "
    s += intToString(a.x);      // s: "Hello Hello 42"
    return s;
}

fn setX(s: mut Super){
    (s as Sub).x = 42;
}

fn setXSub(s: mut Sub){
    s.x = 50;
}

fn readY(s: Sub) -> String {
    return s.y;
}
