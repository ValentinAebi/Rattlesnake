
interface Super {
    x: Int
}

struct Sub : Super {
    var x: Int,
    y: String
}

fn create() -> mut Super {
    return new mut Sub { 10, "Hello" };
}

fn testFunc() -> String {
    val a = create() as mut Sub;
    var s = readY(a) + " ";     // s: "Hello "
    val b: mut Super = a;
    setX(b);
    s += readY(b as Sub);       // s: "Hello Hello"
    s += " ";                   // s: "Hello Hello "
    s += intToString(a.x);      // s: "Hello Hello 42"
    return s;
}

fn setX(s: mut Super){
    (s as Sub).x = 42;
}

fn readY(s: Sub) -> String {
    return s.y;
}
