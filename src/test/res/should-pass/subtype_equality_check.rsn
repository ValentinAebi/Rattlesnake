
package Arrays {

    fn testSupSup() -> Bool {
        val sCreator = new SCreator();
        val iCreator = new ICreator(sCreator);
        return Comparisons.compareSupSup(iCreator.createI(), iCreator.createI());
    }

    fn testSubAsSupSup() -> Bool {
        val sCreator = new SCreator();
        val iCreator = new ICreator(sCreator);
        return Comparisons.compareSupSup(sCreator.createS(), iCreator.createI());
    }

    fn testSupSub() -> Bool {
        val sCreator = new SCreator();
        val iCreator = new ICreator(sCreator);
        return Comparisons.compareSupSub(iCreator.createI(), sCreator.createS());
    }

    fn testSubSup() -> Bool {
        val sCreator = new SCreator();
        val iCreator = new ICreator(sCreator);
        return Comparisons.compareSubSup(sCreator.createS(), iCreator.createI());
    }

    fn testSubSub() -> Bool {
        val sCreator = new SCreator();
        return Comparisons.compareSubSub(sCreator.createS(), sCreator.createS());
    }

}

interface I { i: Int }

struct S : I { i: Int }

module ICreator(scr: SCreator) {

    fn createI() -> I {
        val s1 = me.scr.createS();
        val s2: I = new S(s1.i);
        return new S(s2.i);
    }

}

module SCreator() {

    fn createS() -> S {
        return new S(42);
    }

}

package Comparisons {

    fn compareSupSup(a: I, b: I) -> Bool {
        return a == b;
    }

    fn compareSupSub(a: I, b: S) -> Bool {
        return a == b;
    }

    fn compareSubSup(a: S, b: I) -> Bool {
        return a == b;
    }

    fn compareSubSub(a: S, b: S) -> Bool {
        return a == b;
    }

}
